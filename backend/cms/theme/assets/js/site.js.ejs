$(document).ready(function() {
  // query
  const query = util.parseUrlQuery();
  // title
  title(query);
  // menu active
  menuActive(query);
  // breadcrumb
  breadcrumb(query);
  // search text
  if (query.search) {
    $('form.search input').val(query.search);
  }
});

$(document).on('echo-ready', function() {
  // query
  const query = util.parseUrlQuery();
  // load more
  loadMore(query);
  // category tree
  categoryTree($('.category-sidebar'));
  // category tree toggle
  categoryTreeToggle($('.category-sidebar-toggle'), $('.doc-container'));
});

function categoryTreeToggle($toggle, $container) {
  const $window = $(window);
  const keyName = '_doc_tree_collapse';
  function _toggle() {
    let collapse = window.localStorage.getItem(keyName) || 'false';
    if (collapse === 'false') {
      collapse = 'true';
      $container.addClass('sidebar-collapse');
    } else {
      collapse = 'false';
      $container.removeClass('sidebar-collapse');
    }
    window.localStorage.setItem(keyName, collapse);
  }
  function _initOrSet(collapse) {
    if (collapse === undefined) {
      collapse = window.localStorage.getItem(keyName) || 'false';
    } else {
      window.localStorage.setItem(keyName, collapse);
    }
    if (collapse === 'false') {
      $container.removeClass('sidebar-collapse');
    } else {
      $container.addClass('sidebar-collapse');
    }
  }

  $toggle.on('click', e => {
    e.preventDefault();
    _toggle();
  });
  $window.resize(() => {
    if ($window.width() <= 768) {
      _initOrSet('true');
    } else {
      _initOrSet('false');
    }
  });

  _initOrSet();
}

function categoryTree($treeContainer) {
  if (!env.article) return;

  const $title = $('.title', $treeContainer);
  const $tree = $('.tree', $treeContainer);
  if ($tree.length === 0) return;

  $tree.on('changed.jstree', function(e, data) {
    const node = data.node;
    if (!node) return e.preventDefault();
    if (node.type === 'folder') return e.preventDefault();
    if (node.type === 'file' && node.id === `${env.article.categoryId}:${env.article.atomId}`) {
      return window.location.href = '#';
    }
    window.location.href = node.a_attr.href;
  }).on('load_node.jstree', function(e, data) {
    if (data.status) {
      const node = data.node;
      if (node.id === '#') {
        // open article's parent category
        $tree.jstree(true).open_node(env.article.categoryId);
      } else if (node.id === env.article.categoryId.toString()) {
        // fill article's h2es
        _fillArticleH2es($tree);
        // open article
        $tree.jstree(true).select_node(`${env.article.categoryId}:${env.article.atomId}`, true);
        $tree.jstree(true).open_node(`${env.article.categoryId}:${env.article.atomId}`);
      }
    }
  });
  $tree.jstree({
    plugins: [ 'types' ],
    types: {
      folder: {},
      file: {
        icon: 'jstree-icon jstree-file',
      },
      h2: {},
    },
    core: {
      check_callback: true,
      data(node, cb) {
        const self = this;
        if (node.id === '#') {
          // articleCategoryTop
          util.performAction({
            method: 'post',
            url: '/a/cms/category/relativeTop',
            body: { categoryId: env.article.categoryId },
          }).then(category => {
            if (!category) return cb.call(self, []);
            // menu active
            menuActive({ categoryId: category.id });
            // title
            $title.text(category.categoryName);
            // tree
            util.performAction({
              method: 'post',
              url: '/a/cms/category/tree',
              body: {
                atomClass: env.site.atomClass,
                categoryId: category.id,
              },
            }).then(tree => {
              // prepare tree data
              const data = _prepareTreeData(tree.list);
              cb.call(self, data);
            });
          });
        } else {
          // articles
          _fetchArticles({
            index: 0,
            categoryId: node.id,
            orders: [
              [ 'f.sticky', 'desc' ],
              [ 'f.sorting', 'asc' ],
              [ 'a.createdAt', 'asc' ],
            ],
          }).then(res => {
            const data = _prepareArtilesData(node.id, res.list);
            cb.call(self, data);
          });
        }
      },
    },
  });
}

function _fillArticleH2es($tree) {
  const h2es = $('.article-body h2');
  for (let i = 0; i < h2es.length; i++) {
    const h2 = $(h2es[i]);
    const h2link = $('a', h2);
    const h2linkId = h2link.attr('id');
    const _item = {
      id: `${env.article.categoryId}:${env.article.atomId}:${h2linkId}`,
      text: h2.text(),
      type: 'h2',
      icon: false,
      a_attr: {
        href: `#${h2linkId}`,
      },
    };
    $tree.jstree(true).create_node(`${env.article.categoryId}:${env.article.atomId}`, _item);
  }
}

function _prepareArtilesData(categoryId, list) {
  const _list = [];
  for (let i = 0; i < list.length; i++) {
    const item = list[i];
    const _item = {
      id: `${categoryId}:${item.atomId}`,
      text: util.escapeHtml(item.atomName),
      type: 'file',
      icon: false,
      a_attr: {
        href: util.url(item.url),
      },
    };
    _list.push(_item);
  }
  return _list;
}

function _prepareTreeData(list) {
  if (!list) return null;
  if (list.length === 0) return [];
  const _list = [];
  for (let i = 0; i < list.length; i++) {
    const item = list[i];
    const _item = {
      id: item.id,
      text: util.escapeHtml(item.categoryName),
      type: 'folder',
      icon: false,
      original: item,
    };
    if (item.catalog === 0) {
      _item.children = true;
    } else {
      _item.children = this._prepareTreeData(item.children);
    }
    _list.push(_item);
  }
  return _list;
}

function title(query) {
  if (env.site.path === 'static/articles') {
    if (query.search !== undefined) {
      document.title = `${query.search} | <%=text('Search')%> | ${env.base.title}`;
    } else if (query.categoryId !== undefined) {
      document.title = `${query.categoryName} | <%=text('Category')%> | ${env.base.title}`;
    } else if (query.tagId !== undefined) {
      document.title = `${query.tagName} | <%=text('Tag')%> | ${env.base.title}`;
    }
  } else if (env.site.path === 'static/comments') {
    document.title = `<%=text('Comments')%> | ${env.base.title}`;
  }
}

function menuActive(query) {
  const categoryId = query.categoryId || (env.article && env.article.categoryId);
  if (categoryId) {
    const link = $(`.category-${categoryId}`);
    link.parents('li').addClass('active');
  }
}

function breadcrumb(query) {
  const $container = $('.breadcrumb-nav');
  // nav
  if (env.site.path === 'static/articles') {
    if (query.search !== undefined) {
      $('.parent', $container).text('<%=text("Search")%>');
      $('.current', $container).text(query.search);
    } else if (query.categoryId !== undefined) {
      $('.parent', $container).text('<%=text("Category")%>');
      $('.current', $container).text(query.categoryName);
    } else if (query.tagId !== undefined) {
      $('.parent', $container).text('<%=text("Tag")%>');
      $('.current', $container).text(query.tagName);
    }
  } else if (env.site.path === 'static/comments') {
    $('.parent', $container).text('<%=text("Comment")%>');
    $('.current', $container).text('<%=text("All")%>');
  } else if (env.site.path === 'main/article') {
    $('.parent', $container).html(`<a href="${util.url('static/articles.html')}?categoryId=${env.article.categoryId}&categoryName=${encodeURIComponent(env.article.categoryName)}">${util.escapeHtml(env.article.categoryName)}</a>`);
    $('.current', $container).text(env.article.atomName);
  }
  // show
  if (env.site.path !== 'main/index/index') {
    $('.parent', $container).removeClass('hidden');
    $('.current', $container).removeClass('hidden');
  }
}

function loadMore(query) {
  _loadMore({
    categoryId: query.categoryId,
    tagId: query.tagId,
    search: query.search,
  });
}

function _loadMore({ categoryId, tagId, search }) {
  if ($('.article-list').length === 0) return;
  util.loadMore({
    container: '.article-list',
    index: (env.index && env.index[env.site.path]) || 0,
    onFetch({ index }) {
      return _fetchArticles({ index, categoryId, tagId, search });
    },
    onParse(item) {
      const sticky = !item.sticky ? '' : '<span class="glyphicon glyphicon-pushpin"></span> ';
      const audio = !item.audioFirst ? '' : '<span class="glyphicon glyphicon-music"></span> ';
      const attachment = item.attachmentCount === 0 ? '' : '<span class="glyphicon glyphicon-paperclip"></span> ';
      const mediaUrl = item.imageFirst || item.audioCoverFirst;
      const media = !mediaUrl ? '' : `
<div class="media-right">
      <a target="_blank" href="${util.url(item.url)}">
        <img class="media-object" src="${util.combineImageUrl(mediaUrl, 125, 100)}">
      </a>
</div>
        `;
      const category = (categoryId === undefined) ?
        `<a target="_blank" href="${util.url('static/articles.html')}?categoryId=${item.categoryId}&categoryName=${encodeURIComponent(item.categoryName)}"><span class="num category">${util.escapeHtml(item.categoryName)}</span></a>` : '';
      // tags
      let tagsText = '';
      const tags = item.tags ? JSON.parse(item.tags) : null;
      if (tags && tags.length > 0) {
        tagsText += '<span class="num glyphicon glyphicon-tags"></span> ';
        for (let i = 0; i < tags.length; i++) {
          const tag = tags[i];
          tagsText += `<a target="_blank" href="${util.url('static/articles.html')}?tagId=${tag.id}&tagName=${encodeURIComponent(tag.name)}"><span class="num tag">${util.escapeHtml(tag.name)}</span></a>`;
        }
        tagsText += '';
      }
      const stat = `
<div class="title stat no-parse" data-article-id="${item.atomId}">
${category}
<span class="num date">${util.formatDateTime(item.createdAt)}</span>
<span class="glyphicon glyphicon-eye-open"></span><span class="num readCount">${item.readCount}</span>
<span class="glyphicon glyphicon-heart"></span><span class="num starCount">${item.starCount}</span>
<a target="_blank" href="${util.url(item.url)}#comments"><span class="glyphicon glyphicon-comment"></span><span class="num commentCount">${item.commentCount}</span></a>
${tagsText}
</div>
        `;
      return `
<li class="media">
    <div class="media-body">
      <h4 class="media-heading">${sticky}${audio}${attachment}<a target="_blank" href="${util.url(item.url)}">${util.escapeHtml(item.atomName)}</a></h4>
      ${util.escapeHtml(item.description) || item.summary}
      ${stat}
    </div>
    ${media}
</li>
        `;
    },
  });
}

function _fetchArticles({ index, categoryId, tagId, search, orders }) {
  // options
  const options = {
    where: {
      'f.language': env.language.current,
    },
    orders: [
      [ 'f.sticky', 'desc' ],
      [ 'a.createdAt', 'desc' ],
    ],
    page: { index },
    mode: 'list',
  };
  // categoryId
  if (categoryId) {
    options.where['f.categoryId'] = categoryId;
    options.orders = orders || [
      [ 'f.sticky', 'desc' ],
      [ 'f.sorting', 'asc' ],
      [ 'a.createdAt', 'desc' ],
    ];
  }
  // tagId
  if (tagId) {
    options.where['f.tagId'] = tagId;
    options.orders = [
      [ 'f.sticky', 'desc' ],
      [ 'a.createdAt', 'desc' ],
    ];
    options.mode = 'tag';
  }
  // search
  if (search) {
    options.where['f.contentSearch'] = { val: search, op: 'like' };
    options.mode = 'search';
  }
  // select
  return util.performAction({
    method: 'post',
    url: '/a/cms/article/list',
    body: {
      atomClass: env.site.atomClass,
      options,
    },
  });
}
